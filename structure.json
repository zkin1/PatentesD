{
  "server": {
    "config": {
      "config.js": "require('dotenv').config();\r\n\r\nmodule.exports = {\r\n  API_URL: process.env.API_URL,\r\n  PORT: process.env.PORT || 49160,\r\n  HOST: process.env.HOST || '0.0.0.0',\r\n  CORS_ORIGINS: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : [],\r\n};",
      "database.js": "const fs = require('fs');\r\nconst path = require('path');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nrequire('dotenv').config();\r\n\r\n\r\nconst dbPassword = process.env.DB_PASSWORD || '';\r\nconst dbPath = process.env.DB_PATH || path.join(__dirname, '../../data/patentesD.db');\r\n\r\n\r\nconst db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {\r\n    if (err) {\r\n      console.error('Error al abrir la base de datos:', err.message);\r\n    } else {\r\n      if (dbPassword) {\r\n        db.run(`PRAGMA key = '${dbPassword}'`);\r\n      }\r\n      console.log('Conectado a la base de datos SQLite');\r\n    }\r\n  });\r\n\r\nmodule.exports = db;",
      "email.js": "const nodemailer = require('nodemailer');\r\nrequire('dotenv').config();\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  host: \"smtp.gmail.com\",\r\n  port: 587,\r\n  secure: false,\r\n  auth: {\r\n    user: process.env.EMAIL_USER,\r\n    pass: process.env.EMAIL_PASS\r\n  }\r\n});\r\n\r\nmodule.exports = transporter;"
    },
    "controllers": {
      "authController.js": "const bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst db = require('../config/database');\r\nconst transporter = require('../config/email');\r\nconst crypto = require('crypto');\r\n\r\nconst codigosVerificacion = new Map();\r\n\r\nexports.login = async (req, res) => {\r\n  const { correoInstitucional, contraseña } = req.body;\r\n  \r\n  db.get('SELECT * FROM usuarios WHERE correoInstitucional = ?', [correoInstitucional], async (err, row) => {\r\n    if (err) {\r\n      console.error('Error en la base de datos:', err);\r\n      return res.status(500).json({ valido: false, message: 'Error interno del servidor' });\r\n    }\r\n\r\n    if (row && await bcrypt.compare(contraseña, row.contraseña)) {\r\n      const token = jwt.sign({ id: row.id, correoInstitucional: row.correoInstitucional }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n      res.json({\r\n        valido: true,\r\n        token,\r\n        usuario: {\r\n          nombre: row.nombre,\r\n          correoInstitucional: row.correoInstitucional\r\n        }\r\n      });\r\n    } else {\r\n      res.status(401).json({ valido: false, message: 'Credenciales inválidas' });\r\n    }\r\n  });\r\n};\r\n\r\nexports.register = async (req, res) => {\r\n  const { nombre, correoInstitucional, contraseña, numeroPatente, numeroTelefono } = req.body;\r\n\r\n  try {\r\n    const existingUser = await new Promise((resolve, reject) => {\r\n      db.get('SELECT * FROM usuarios WHERE correoInstitucional = ? OR numeroPatente = ?', \r\n        [correoInstitucional, numeroPatente], (err, row) => {\r\n        if (err) reject(err);\r\n        else resolve(row);\r\n      });\r\n    });\r\n\r\n    if (existingUser) {\r\n      if (existingUser.correoInstitucional === correoInstitucional) {\r\n        return res.status(409).json({ error: 'Ya existe un usuario con este correo institucional' });\r\n      } else {\r\n        return res.status(409).json({ error: 'Ya existe un usuario con esta patente' });\r\n      }\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(contraseña, 10);\r\n\r\n    await new Promise((resolve, reject) => {\r\n      db.run('INSERT INTO usuarios (nombre, contraseña, numeroPatente, numeroTelefono, correoInstitucional) VALUES (?, ?, ?, ?, ?)',\r\n        [nombre, hashedPassword, numeroPatente, numeroTelefono, correoInstitucional],\r\n        function(err) {\r\n          if (err) reject(err);\r\n          else resolve(this.lastID);\r\n        }\r\n      );\r\n    });\r\n\r\n    res.status(201).json({ message: 'Usuario registrado exitosamente' });\r\n  } catch (error) {\r\n    console.error('Error al registrar usuario:', error);\r\n    res.status(500).json({ error: 'Error interno del servidor al registrar el usuario' });\r\n  }\r\n};\r\n\r\nexports.enviarCodigoVerificacion = async (req, res) => {\r\n  const { correoInstitucional } = req.body;\r\n  const codigo = crypto.randomInt(1000, 9999).toString();\r\n\r\n  try {\r\n    const usuario = await new Promise((resolve, reject) => {\r\n      db.get('SELECT * FROM usuarios WHERE correoInstitucional = ?', [correoInstitucional], (err, row) => {\r\n        if (err) reject(err);\r\n        else resolve(row);\r\n      });\r\n    });\r\n\r\n    if (!usuario) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n\r\n    await transporter.sendMail({\r\n      from: '\"Patentes Duoc UC\" <noreply@duoc.cl>',\r\n      to: correoInstitucional,\r\n      subject: \"Código de verificación para cambio de contraseña\",\r\n      text: `Tu código de verificación es: ${codigo}`,\r\n      html: `<b>Tu código de verificación es: ${codigo}</b>`\r\n    });\r\n\r\n    codigosVerificacion.set(correoInstitucional, {\r\n      codigo,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    res.json({ message: 'Código enviado' });\r\n  } catch (error) {\r\n    console.error('Error al enviar el correo:', error);\r\n    res.status(500).json({ message: 'Error al enviar el código' });\r\n  }\r\n};\r\n\r\nexports.verificarCodigo = (req, res) => {\r\n  const { correoInstitucional, codigo } = req.body;\r\n  const verificacion = codigosVerificacion.get(correoInstitucional);\r\n\r\n  if (!verificacion) {\r\n    return res.status(400).json({ message: 'No se ha solicitado un código para este correo' });\r\n  }\r\n\r\n  if (verificacion.codigo !== codigo) {\r\n    return res.status(400).json({ message: 'Código incorrecto' });\r\n  }\r\n\r\n  if (Date.now() - verificacion.timestamp > 15 * 60 * 1000) {\r\n    codigosVerificacion.delete(correoInstitucional);\r\n    return res.status(400).json({ message: 'El código ha expirado' });\r\n  }\r\n\r\n  codigosVerificacion.delete(correoInstitucional);\r\n  res.json({ message: 'Código verificado correctamente' });\r\n};\r\n\r\nexports.cambiarPassword = async (req, res) => {\r\n  const { correoInstitucional, nuevaPassword } = req.body;\r\n\r\n  try {\r\n    const hashedPassword = await bcrypt.hash(nuevaPassword, 10);\r\n    \r\n    await new Promise((resolve, reject) => {\r\n      db.run('UPDATE usuarios SET contraseña = ? WHERE correoInstitucional = ?', [hashedPassword, correoInstitucional], function(err) {\r\n        if (err) reject(err);\r\n        else resolve(this.changes);\r\n      });\r\n    });\r\n\r\n    res.json({ message: 'Contraseña actualizada exitosamente' });\r\n  } catch (error) {\r\n    console.error('Error al cambiar la contraseña:', error);\r\n    res.status(500).json({ message: 'Error al cambiar la contraseña' });\r\n  }\r\n};",
      "searchController.js": "const db = require('../config/database');\r\n\r\nexports.searchByPatente = (req, res) => {\r\n  const numeroPatente = req.params.numeroPatente;\r\n  console.log('Buscando patente:', numeroPatente);\r\n  db.get('SELECT id, nombre, numeroPatente, numeroTelefono, correoInstitucional FROM usuarios WHERE numeroPatente = ?', [numeroPatente], (err, row) => {\r\n    if (err) {\r\n      console.error('Error en la consulta a la base de datos:', err);\r\n      res.status(500).json({ error: 'Error interno del servidor', details: err.message });\r\n      return;\r\n    }\r\n    if (row) {\r\n      console.log('Usuario encontrado:', row);\r\n      res.json(row);\r\n    } else {\r\n      console.log('Usuario no encontrado');\r\n      res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n  });\r\n};\r\n\r\nexports.registerSearch = async (req, res) => {\r\n    const { correoUsuario, numeroPatente } = req.body;\r\n    console.log('Registrando consulta:', { correoUsuario, numeroPatente });\r\n    \r\n    try {\r\n      const lastID = await new Promise((resolve, reject) => {\r\n        db.run('INSERT INTO consultasRegistradas (correoUsuario, numeroPatente) VALUES (?, ?)',\r\n          [correoUsuario, numeroPatente],\r\n          function(err) {\r\n            if (err) reject(err);\r\n            else resolve(this.lastID);\r\n          }\r\n        );\r\n      });\r\n      \r\n      console.log('Consulta registrada exitosamente');\r\n      res.status(201).json({ message: 'Consulta registrada exitosamente', id: lastID, correoUsuario, numeroPatente });\r\n    } catch (err) {\r\n      console.error('Error al registrar la consulta:', err);\r\n      res.status(500).json({ error: 'Error al registrar la consulta', details: err.message });\r\n    }\r\n  };\r\n\r\nexports.getAllSearches = (req, res) => {\r\n  console.log('Obteniendo todas las consultas registradas');\r\n  db.all('SELECT * FROM consultasRegistradas', [], (err, rows) => {\r\n    if (err) {\r\n      console.error('Error al obtener las consultas:', err);\r\n      res.status(500).json({ error: 'Error al obtener las consultas', details: err.message });\r\n      return;\r\n    }\r\n    console.log(`Se encontraron ${rows.length} consultas`);\r\n    res.json(rows);\r\n  });\r\n};\r\n\r\nexports.verifyPatente = (req, res) => {\r\n  const { numeroPatente } = req.params;\r\n  console.log('Verificando patente:', numeroPatente);\r\n  db.get('SELECT * FROM usuarios WHERE numeroPatente = ?', [numeroPatente], (err, row) => {\r\n    if (err) {\r\n      console.error('Error al verificar la patente:', err);\r\n      res.status(500).json({ error: 'Error al verificar la patente', details: err.message });\r\n      return;\r\n    }\r\n    const existe = !!row;\r\n    console.log(`Patente ${numeroPatente} ${existe ? 'existe' : 'no existe'}`);\r\n    res.status(200).json({ existe });\r\n  });\r\n};",
      "userController.js": "const db = require('../config/database');\r\n\r\nexports.getUser = (req, res) => {\r\n  const { id } = req.params;\r\n  db.get('SELECT id, nombre, correoInstitucional, numeroPatente, numeroTelefono FROM usuarios WHERE id = ?', [id], (err, row) => {\r\n    if (err) {\r\n      res.status(500).json({ error: err.message });\r\n      return;\r\n    }\r\n    if (row) {\r\n      res.json(row);\r\n    } else {\r\n      res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n  });\r\n};\r\n\r\nexports.getAllUsers = (req, res) => {\r\n  db.all('SELECT id, nombre, correoInstitucional, numeroPatente, numeroTelefono FROM usuarios', [], (err, rows) => {\r\n    if (err) {\r\n      res.status(500).json({ error: err.message });\r\n      return;\r\n    }\r\n    res.json(rows);\r\n  });\r\n};\r\n\r\nexports.updateUser = (req, res) => {\r\n  const { id } = req.params;\r\n  const { nombre, numeroTelefono } = req.body;\r\n  \r\n  db.run(\r\n    'UPDATE usuarios SET nombre = COALESCE(?, nombre), numeroTelefono = COALESCE(?, numeroTelefono) WHERE id = ?',\r\n    [nombre, numeroTelefono, id],\r\n    function(err) {\r\n      if (err) {\r\n        res.status(500).json({ error: err.message });\r\n        return;\r\n      }\r\n      res.json({ message: 'Usuario actualizado', changes: this.changes });\r\n    }\r\n  );\r\n};"
    },
    "middleware": {
      "auth.js": "const jwt = require('jsonwebtoken');\r\n\r\nconst authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (token == null) return res.sendStatus(401);\r\n\r\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\r\n    if (err) {\r\n      console.error('Error al verificar el token:', err);\r\n      return res.sendStatus(403);\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nmodule.exports = authenticateToken;",
      "errorHandler.js": "const errorHandler = (err, req, res, next) => {\r\n    console.error(err.stack);\r\n  \r\n    const statusCode = err.statusCode || 500;\r\n    const message = err.message || 'Error interno del servidor';\r\n  \r\n    res.status(statusCode).json({\r\n      error: {\r\n        message: message,\r\n        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\r\n      }\r\n    });\r\n  };\r\n  \r\n  module.exports = errorHandler;",
      "rateLimiter.js": "const rateLimit = require('express-rate-limit');\r\n\r\nconst apiLimiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutos\r\n  max: 100, // límite de 100 solicitudes por ventana\r\n  message: 'Demasiadas solicitudes desde esta IP, por favor intente nuevamente después de 15 minutos'\r\n});\r\n\r\nmodule.exports = apiLimiter;"
    },
    "models": {
      "Search.js": "const db = require('../config/database');\r\n\r\nclass Search {\r\n  static create(search) {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('INSERT INTO consultasRegistradas (correoUsuario, numeroPatente) VALUES (?, ?)',\r\n        [search.correoUsuario, search.numeroPatente],\r\n        function(err) {\r\n          if (err) reject(err);\r\n          else resolve(this.lastID);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  static findByPatente(patente) {\r\n    return new Promise((resolve, reject) => {\r\n      db.get('SELECT id, nombre, numeroPatente, numeroTelefono, correoInstitucional FROM usuarios WHERE numeroPatente = ?', [patente], (err, row) => {\r\n        if (err) reject(err);\r\n        else resolve(row);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Search;",
      "User.js": "const db = require('../config/database');\r\n\r\nclass User {\r\n  static findByEmail(email) {\r\n    return new Promise((resolve, reject) => {\r\n      db.get('SELECT * FROM usuarios WHERE correoInstitucional = ?', [email], (err, row) => {\r\n        if (err) reject(err);\r\n        else resolve(row);\r\n      });\r\n    });\r\n  }\r\n\r\n  static create(user) {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('INSERT INTO usuarios (nombre, contraseña, numeroPatente, numeroTelefono, correoInstitucional) VALUES (?, ?, ?, ?, ?)',\r\n        [user.nombre, user.contraseña, user.numeroPatente, user.numeroTelefono, user.correoInstitucional],\r\n        function(err) {\r\n          if (err) reject(err);\r\n          else resolve(this.lastID);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  static updatePassword(email, password) {\r\n    return new Promise((resolve, reject) => {\r\n      db.run('UPDATE usuarios SET contraseña = ? WHERE correoInstitucional = ?', [password, email], function(err) {\r\n        if (err) reject(err);\r\n        else resolve(this.changes);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = User;"
    },
    "routes": {
      "authRoutes.js": "const express = require('express');\r\nconst { body } = require('express-validator');\r\nconst authController = require('../controllers/authController');\r\nconst router = express.Router();\r\n\r\n// Nota: No es necesario agregar '/api/auth' aquí, se agregará en server.js\r\n\r\nrouter.post('/login', [\r\n  body('correoInstitucional').isEmail(),\r\n  body('contraseña').isLength({ min: 6 })\r\n], authController.login);\r\n\r\nrouter.post('/register', [\r\n  body('nombre').isString().trim().notEmpty(),\r\n  body('correoInstitucional').isEmail(),\r\n  body('contraseña').isLength({ min: 6 }),\r\n  body('numeroPatente').custom((value) => {\r\n    if (!/^[A-Z]{2}\\d{4}$|^[A-Z]{4}\\d{2}$/.test(value)) {\r\n      throw new Error('Formato de patente inválido');\r\n    }\r\n    return true;\r\n  }),\r\n  body('numeroTelefono').isMobilePhone()\r\n], authController.register);\r\n\r\nrouter.post('/enviar-codigo', [\r\n  body('correoInstitucional').isEmail()\r\n], authController.enviarCodigoVerificacion);\r\n\r\nrouter.post('/verificar-codigo', [\r\n  body('correoInstitucional').isEmail(),\r\n  body('codigo').isLength({ min: 4, max: 4 })\r\n], authController.verificarCodigo);\r\n\r\nrouter.post('/cambiar-password', [\r\n  body('correoInstitucional').isEmail(),\r\n  body('nuevaPassword').isLength({ min: 6 })\r\n], authController.cambiarPassword);\r\n\r\nmodule.exports = router;",
      "searchRoutes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst searchController = require('../controllers/searchController');\r\nconst authenticateToken = require('../middleware/auth');\r\n\r\nrouter.get('/patente/:numeroPatente', authenticateToken, searchController.searchByPatente);\r\nrouter.post('/consultasRegistradas', authenticateToken, searchController.registerSearch);\r\nrouter.get('/consultasRegistradas', authenticateToken, searchController.getAllSearches);\r\nrouter.get('/verify/:numeroPatente', searchController.verifyPatente);\r\n\r\nmodule.exports = router;",
      "userRoutes.js": "const express = require('express');\r\nconst userController = require('../controllers/userController');\r\nconst authenticateToken = require('../middleware/auth');\r\nconst router = express.Router();\r\n\r\nrouter.get('/', authenticateToken, userController.getAllUsers);\r\nrouter.get('/:id', authenticateToken, userController.getUser);\r\nrouter.put('/:id', authenticateToken, userController.updateUser);\r\n\r\nmodule.exports = router;"
    },
    "server.js": "// Importaciones de módulos\r\nrequire('dotenv').config();\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\nconst path = require('path');\r\nconst https = require('https');\r\nconst http = require('http');\r\nconst fs = require('fs');\r\n\r\n// Importaciones de rutas\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst userRoutes = require('./routes/userRoutes');\r\nconst searchRoutes = require('./routes/searchRoutes');\r\n\r\n// Importaciones de middleware\r\nconst errorHandler = require('./middleware/errorHandler');\r\nconst rateLimiter = require('./middleware/rateLimiter');\r\nconst config = require('./config/config');\r\n\r\n// Configuración de la aplicación\r\nconst app = express();\r\nconst PORT = process.env.PORT || 49160;\r\nconst HOST = process.env.HOST || '0.0.0.0';\r\n\r\n// Middleware\r\napp.use(cors({\r\n  origin: config.CRORS_OIGINS,\r\n  optionsSuccessStatus: 200\r\n}));\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      ...helmet.contentSecurityPolicy.getDefaultDirectives(),\r\n      \"default-src\": [\"'self'\", \"https:\", \"http:\"],\r\n      \"script-src\": [\"'self'\", \"'unsafe-inline'\", \"https:\", \"http:\"],\r\n      \"script-src-attr\": [\"'unsafe-inline'\"],\r\n      \"style-src\": [\"'self'\", \"'unsafe-inline'\", \"https:\", \"http:\"],\r\n      \"img-src\": [\"'self'\", \"data:\", \"https:\", \"http:\"],\r\n      \"font-src\": [\"'self'\", \"https:\", \"http:\"],\r\n    },\r\n  },\r\n  crossOriginEmbedderPolicy: false,\r\n  crossOriginOpenerPolicy: { policy: \"same-origin-allow-popups\" },\r\n}));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(rateLimiter);\r\n\r\n// Servir archivos estáticos\r\napp.use(express.static(path.join(__dirname, '..', 'src')));\r\n\r\n// Rutas\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/users', userRoutes);\r\napp.use('/api/search', searchRoutes);\r\n\r\n// Ruta para manejar las páginas HTML específicas\r\napp.get('/*.html', (req, res) => {\r\n  const htmlContent = fs.readFileSync(path.join(__dirname, '..', 'src', 'html', req.path), 'utf8');\r\n  const renderedHtml = htmlContent.replace('{{API_URL}}', config.API_URL);\r\n  res.send(renderedHtml);\r\n});\r\n\r\n// Ruta para la página principal\r\napp.get('/', (req, res) => {\r\n  const htmlContent = fs.readFileSync(path.join(__dirname, '..', 'src', 'html', 'index.html'), 'utf8');\r\n  const renderedHtml = htmlContent.replace('{{API_URL}}', config.API_URL);\r\n  res.send(renderedHtml);\r\n});\r\n\r\n// Ruta para manejar todas las demás solicitudes\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname, '..', 'src', 'html', 'index.html'));\r\n});\r\n\r\n// Middleware de manejo de errores\r\napp.use(errorHandler);\r\n\r\n\r\n// Configuración de HTTPS\r\nconst httpsOptions = {\r\n  key: fs.readFileSync('/usr/src/app/ssl/server.key'),\r\n  cert: fs.readFileSync('/usr/src/app/ssl/server.crt')\r\n};\r\n\r\n// Crear servidores HTTP y HTTPS\r\nconst httpServer = http.createServer(app);\r\nconst httpsServer = https.createServer(httpsOptions, app);\r\n\r\n// Iniciar servidores\r\nhttpServer.listen(80, () => {\r\n  console.log(`Servidor HTTP escuchando en ${config.API_URL}:80`);\r\n});\r\n\r\nhttpsServer.listen(443, () => {\r\n  console.log(`Servidor HTTPS escuchando en ${config.API_URL}:443`);\r\n});\r\n\r\n\r\n// Manejo de cierre del servidor\r\nprocess.on('SIGTERM', () => {\r\n  console.log('SIGTERM recibido. Cerrando servidores HTTP y HTTPS.');\r\n  httpServer.close(() => console.log('Servidor HTTP cerrado.'));\r\n  httpsServer.close(() => console.log('Servidor HTTPS cerrado.'));\r\n});\r\n\r\n\r\napp.options('*', cors()) // habilita pre-flight request para todas las rutas\r\n// Exportar la app para pruebas\r\nmodule.exports = app;",
    "services": {
      "emailService.js": "const transporter = require('../config/email');\r\n\r\nclass EmailService {\r\n  static async sendVerificationCode(email, code) {\r\n    try {\r\n      await transporter.sendMail({\r\n        from: '\"Patentes Duoc UC\" <noreply@duoc.cl>',\r\n        to: email,\r\n        subject: \"Código de verificación para cambio de contraseña\",\r\n        text: `Tu código de verificación es: ${code}`,\r\n        html: `<b>Tu código de verificación es: ${code}</b>`\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al enviar el correo:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = EmailService;",
      "tokenService.js": "const jwt = require('jsonwebtoken');\r\n\r\nclass TokenService {\r\n  static generateToken(user) {\r\n    return jwt.sign(\r\n      { id: user.id, correoInstitucional: user.correoInstitucional },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '1h' }\r\n    );\r\n  }\r\n\r\n  static verifyToken(token) {\r\n    try {\r\n      return jwt.verify(token, process.env.JWT_SECRET);\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = TokenService;"
    }
  }
}